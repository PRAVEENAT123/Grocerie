{% schema %}
  {
    "name": "Recipe Section",
    "settings": [
      {
        "type": "text",
        "id": "recipe_title",
        "label": "Name Of the Recipe",
        "default": "Your Menu"
      }, {
        "type": "image_picker",
        "id": "recipe_image",
        "label": "Recipe Image"
      }, {
        "type": "text",
        "id": "recipe_people",
        "label": "Number of People",
        "default": "1"
      }, {
        "type": "textarea",
        "id": "recipe_instructions",
        "label": "Recipe Instructions"
      }
    ],
    "blocks": [
      {
        "type": "ingredient",
        "name": "Ingredient",
        "settings": [
          {
            "type": "text",
            "id": "ingredient_name",
            "label": "Ingredient Name"
          }, {
            "type": "number",
            "id": "ingredient_measurement",
            "label": "Measurement",
            "default": 100
          }, {
            "type": "select",
            "id": "ingredient_measurement_scale",
            "label": "Scale",
            "options": [
              {
                "value": "GM",
                "label": "GM"
              }, {
                "value": "KG",
                "label": "KG"
              }, {
                "value": "ML",
                "label": "ML"
              }
            ]
          }, {
            "type": "product",
            "id": "ingredient_product",
            "label": "Associated Product"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "Recipe Section",
        "category": "Custom"
      }
    ]
  }
{% endschema %}

<div class="border-b border-slate-200" id="section-{{ section.id }}">
  <button onclick="toggleAccordion('{{ section.id }}')" class="w-full flex justify-between items-center py-5 text-slate-800">
    <span>{{ section.settings.recipe_title }}</span>
    <span id="icon-{{ section.id }}" class="text-slate-800 transition-transform duration-300">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="currentColor"
        class="w-4 h-4">
        <path
          fill-rule="evenodd"
          d="M12 15.292l-5.146-5.146a1 1 0 0 1 1.414-1.414l4.292 4.292 4.292-4.292a1 1 0 0 1 1.414 1.414L12 15.292z"
          clip-rule="evenodd" />
      </svg>
    </span>
  </button>
  <div id="content-{{ section.id }}" class="max-h-0 overflow-hidden transition-all duration-300 ease-in-out">
    <div class="pb-5 text-sm text-slate-500">
      <div class="recipe-section flex flex-wrap md:flex-nowrap">
        <!-- Left Column: Recipe Details -->
        <div class="w-full md:w-1/2 p-4 border-r">
          <h1 class="text-xl font-bold mb-4">{{ section.settings.recipe_title }}</h1>
          <!-- Recipe Image -->
          {% if section.settings.recipe_image %}
            <img
              src="{{ section.settings.ingredient_product.featured_image | image_url: 'small' }}"
              alt="{{ section.settings.ingredient_name }}"
              class="w-16 h-16 object-cover ml-4"
              width="64"
              height="64">
          {% endif %}

          <!-- Number of People -->
          <div class="recipe-people mb-4 flex items-center space-x-4">
            <div>
              <strong>How Many Serves:</strong>
              <input
                type="number"
                id="recipe-people-{{ section.id }}"
                value="{{ section.settings.recipe_people }}"
                class="border p-2 rounded w-16">
            </div>
            <button class="bg-blue-600 text-white font-semibold py-2 px-4 rounded hover:bg-blue-500" onclick="updateIngredients('{{section.id}}')">
              Calculate
            </button>
          </div>
          <div class="recipe-instructions mb-4">
            <h3 class="text-lg font-semibold">Instructions:</h3>
            <p>{{ section.settings.recipe_instructions }}</p>
          </div>
        </div>

        <!-- Right Column: Ingredients, Scale, and Product Details -->
        <div class="w-full md:w-1/2 p-4" style="max-height: 500px; overflow-y: auto;">
          <h3 class="text-lg font-semibold mb-4">Ingredients and Products:</h3>
          <ul id="ingredientsList-{{ section.id }}">
            {% for block in section.blocks %}
              {% if block.type == 'ingredient' %}
                <li class="mb-6 border-b pb-4">
                  <div class="flex items-center justify-between">
                    <!-- Ingredient Name and Measurement -->
                    <div>
                      <span class="font-medium">{{ block.settings.ingredient_name }}:</span>
                      <span id="ingredient{{ forloop.index }}_measurement" data-original="{{ block.settings.ingredient_measurement | remove: 'g' }}">
                        {{ block.settings.ingredient_measurement }}
                      </span>
                      <span id="ingredient{{ forloop.index }}_scale">
                        {{ block.settings.ingredient_measurement_scale }}
                      </span>
                    </div>

                    <!-- Product Information -->
                    {% if block.settings.ingredient_product %}
                      <div class="product-info">
                        {% comment %} <a href="/products/{{ block.settings.ingredient_product.handle }}" class="text-blue-500">View Product</a> {% endcomment %}
                        {% comment %} {% if block.settings.ingredient_product.featured_image %}                                                                                                                                                                                                                src="{{ block.settings.ingredient_product.featured_image | img_url: 'small' }}"
alt="{{ block.settings.ingredient_name }}"
class="w-16 h-16 object-cover ml-4"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                width="64"
height="64">
{% endif %} {% endcomment %}
                        <select
                          class="border p-2 rounded variant{{ forloop.index }}"
                          id="variant{{ block.id }}"
                          data-variants='[
    {% for variant in block.settings.ingredient_product.variants %}
      { 
        "id": "{{ variant.id }}", 
        "weight": {{ variant.weight | times: 1 }},
        "price": "{{ variant.price | money }}", 
        "title": "{{ variant.title }}", 
        "available": {{ variant.available | json }}
      }{% if forloop.last == false %},{% endif %}
    {% endfor %}
  ]'
                          onchange="updateMeasurementForVariant({{ forloop.index }})">
                          <!-- Options will be dynamically updated -->
                          {% assign variant_displayed = false %}
                          {% assign no_matching_variant = true %}
                          {% assign max_variant = null %}
                          {% assign max_weight = 0 %}
                          {% assign ingredient_measurement_value = block.settings.ingredient_measurement | remove: 'g' | times: 1 %}

                          {% for variant in block.settings.ingredient_product.variants %}
                            {% assign variant_weight = variant.weight | times: 1 %}
                            {% if variant_weight >= ingredient_measurement_value and variant_displayed == false %}
                              <option value="{{ variant.id }}" data-available="{{ variant.available }}">
                                {{ variant.title }} - {{ variant.price | money }}
                              </option>
                              {% assign variant_displayed = true %}
                              {% assign no_matching_variant = false %}
                            {% elsif variant_weight > max_weight %}
                              {% assign max_variant = variant %}
                              {% assign max_weight = variant_weight %}
                            {% endif %}
                          {% endfor %}

                          {% if no_matching_variant and max_variant != null %}
                            {% assign required_quantity = ingredient_measurement_value | divided_by: max_variant.weight %}
                            {% assign rounded_quantity = required_quantity | round %}
                            <option value="{{ max_variant.id }}" data-available="{{ max_variant.available }}">
                              {{ max_variant.title }} - {{ max_variant.price | money }} ({{ rounded_quantity }} units)
                            </option>
                          {% endif %}

                        </select>

                        <!-- Add to Cart Button -->
                        <button class="bg-blue-500 text-white p-2 rounded mt-2 add-to-cart-button" onclick="addToCart('variant{{ block.id }}', {{ rounded_quantity | default: 1 }})">
                          Add to Cart
                        </button>
                      </div>
                    {% endif %}
                  </div>
                </li>
              {% endif %}
            {% endfor %}
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
  function toggleAccordion(index) {
    const content = document.getElementById(`content-${index}`);
    const icon = document.getElementById(`icon-${index}`);
   
    // SVG for Down Arrow
    const downArrowSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
        <path fill-rule="evenodd" d="M12 15.292l-5.146-5.146a1 1 0 0 1 1.414-1.414l4.292 4.292 4.292-4.292a1 1 0 0 1 1.414 1.414L12 15.292z" clip-rule="evenodd" />
      </svg>
    `;
   
    // SVG for Up Arrow
    const upArrowSVG = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
        <path fill-rule="evenodd" d="M12 8.707l5.146 5.146a1 1 0 0 1-1.414 1.414L12 10.707l-4.292 4.292a1 1 0 0 1-1.414-1.414L12 8.707z" clip-rule="evenodd" />
      </svg>
    `;
   
    // Toggle the content's max-height for smooth opening and closing
    if (content.style.maxHeight && content.style.maxHeight !== '0px') {
      content.style.maxHeight = '0';
      icon.innerHTML = downArrowSVG; // Set Down Arrow
    } else {
      content.style.maxHeight = content.scrollHeight + 'px';
      icon.innerHTML = upArrowSVG; // Set Up Arrow
    }
  }
</script>
<script>
   function updateIngredients(section_id) {
    const numberOfPeopleInput = document.getElementById(`recipe-people-${section_id}`);
    if (!numberOfPeopleInput) {
        console.error("Input field for 'number of people' is missing");
        return;
    }
    const numberOfPeople = parseInt(numberOfPeopleInput.value);
    if (isNaN(numberOfPeople) || numberOfPeople <= 0) {
        alert("Please enter a valid number of people.");
        return;
    }
  
    const ingredientItems = document.querySelectorAll(`#ingredientsList-${section_id} li`);
    if (!ingredientItems.length) {
        console.error("No ingredients found");
        return;
    }
  
    ingredientItems.forEach((ingredientItem, index) => {
        const measurementElement = ingredientItem.querySelector(`#ingredient${index + 1}_measurement`);
        if (measurementElement && measurementElement.dataset.original) {
            const originalMeasurement = parseFloat(measurementElement.dataset.original);
            if (!isNaN(originalMeasurement)) {
                const newMeasurement = originalMeasurement * numberOfPeople;
                measurementElement.textContent = newMeasurement;
            }
        }
  
        // Get the select element by class
        const selectElements = ingredientItem.getElementsByClassName(`variant${index + 1}`);
        if (selectElements.length > 0) {
            const selectElement = selectElements[0]; // Access the first element
            const variants = JSON.parse(selectElement.dataset.variants);
            const ingredientMeasurement = parseFloat(measurementElement.textContent);
  
            selectElement.innerHTML = ""; // Clear old options
  
            let maxVariant = null;
            let maxWeight = 0;
            let variantDisplayed = false;
  
            variants.forEach(variant => {
                const variantWeight = parseFloat(variant.weight);
                if (variantWeight >= ingredientMeasurement && !variantDisplayed) {
                    const option = document.createElement("option");
                    option.value = variant.id;
                    option.textContent = `${variant.title} - ${variant.price} (1 unit)`;
                    selectElement.appendChild(option);
                    variantDisplayed = true;
                } else if (variantWeight > maxWeight) {
                    maxVariant = variant;
                    maxWeight = variantWeight;
                }
            });
  
            if (!variantDisplayed && maxVariant) {
                const requiredQuantity = Math.ceil(ingredientMeasurement / maxWeight);
                const option = document.createElement("option");
                option.value = maxVariant.id;
                option.textContent = `${maxVariant.title} - ${maxVariant.price} (${requiredQuantity} units)`;
                selectElement.appendChild(option);
            }
             // Set the cart button parameters dynamically
            const selectedVariantId = selectElement.value;
            const unit = Math.ceil(ingredientMeasurement / maxWeight);
        
  
          let addToCartButton = ingredientItem.querySelector(".add-to-cart-button");
  if (!addToCartButton) {
    // If no existing button, create a new one
    addToCartButton = document.createElement("button");
    addToCartButton.className = "bg-blue-500 text-white p-2 rounded mt-2 add-to-cart-button";
    // Append the button to the same parent element where it belongs
    ingredientItem.appendChild(addToCartButton);
  }
  
  // Update the button attributes and text
  addToCartButton.textContent = "Add to Cart";
  addToCartButton.setAttribute("onclick", `addToCart('${selectedVariantId}', ${unit})`);
  alert('working fine ')
            
        } else {
            console.warn(`Select element for ingredient ${index + 1} not found.`);
        }
    });
  }
  
  
  
   function addToCart(variantId, quantity) {
  //               const selectElement = document.getElementById(variantId);
  // alert(selectElement.value)
  alert(variantId)
                let formData = {
                'items': [{
                'id': variantId,
                'quantity': quantity
                }]
                };
  
                    fetch(window.Shopify.routes.root + 'cart/add.js', {
                    method: 'POST',
                    headers: {
                  'Content-Type': 'application/json'
                     },
                      body: JSON.stringify(formData)
                            })
                     .then(response => {
                    
                     return response.json();
                    })
  
                     .catch((error) => {
                   console.error('Error:', error);
                    });
                         };
  
    // Close Modal
</script>
<style>
  .recipe-section {
    padding: 2rem;
  }

  .scrollable-column {
    max-height: 500px;
    overflow-y: auto;
  }

  .recipe-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }
</style>